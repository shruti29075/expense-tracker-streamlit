# -*- coding: utf-8 -*-
"""Expense & Budget Tracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yoLMLgA9NOfRJ77MBwl3K_7tTQbZHp8f
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import os
import altair as alt

st.set_page_config(page_title="ðŸ’° Expense & Budget Tracker", layout="centered")

st.title("ðŸ’° Expense & Budget Tracker")

# --- File Setup ---
DATA_FILE = "expense_data.csv"

# Create file if it doesn't exist
if not os.path.exists(DATA_FILE):
    df_init = pd.DataFrame(columns=["Date", "Type", "Category", "Amount", "Note"])
    df_init.to_csv(DATA_FILE, index=False)

# Load data
df = pd.read_csv(DATA_FILE)

# --- Add New Entry ---
st.subheader("âž• Add New Entry")

with st.form("entry_form"):
    col1, col2 = st.columns(2)
    with col1:
        entry_type = st.selectbox("Type", ["Expense", "Income"])
        category = st.selectbox("Category", ["Food", "Transport", "Bills", "Rent", "Entertainment", "Shopping", "Salary", "Other"])
    with col2:
        amount = st.number_input("Amount", min_value=0.0, step=1.0)
        note = st.text_input("Note (Optional)")
    submit = st.form_submit_button("Add Entry")

    if submit:
        new_entry = {
            "Date": datetime.now().strftime("%Y-%m-%d"),
            "Type": entry_type,
            "Category": category,
            "Amount": round(amount, 2),
            "Note": note
        }
        df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)
        df.to_csv(DATA_FILE, index=False)
        st.success("Entry added successfully!")
        st.rerun()

# --- Summary ---
st.subheader("ðŸ“Š Summary")

if df.empty:
    st.info("No entries yet. Add some expenses or income to see summary.")
else:
    # Filter by month
    df['Date'] = pd.to_datetime(df['Date'])
    this_month = datetime.now().month
    current_month_data = df[df["Date"].dt.month == this_month]

    total_income = current_month_data[current_month_data['Type'] == 'Income']['Amount'].sum()
    total_expense = current_month_data[current_month_data['Type'] == 'Expense']['Amount'].sum()
    balance = total_income - total_expense

    st.metric("Total Income", f"â‚¹ {total_income:,.2f}")
    st.metric("Total Expense", f"â‚¹ {total_expense:,.2f}")
    st.metric("Balance", f"â‚¹ {balance:,.2f}", delta_color="inverse")

    # Charts
    expense_data = current_month_data[current_month_data['Type'] == 'Expense']
    if not expense_data.empty:
        pie = expense_data.groupby("Category")["Amount"].sum().reset_index()
        bar_chart = alt.Chart(pie).mark_bar().encode(
            x="Category", y="Amount", color="Category"
        ).properties(width=600, height=300)

        st.altair_chart(bar_chart, use_container_width=True)

# --- Show Table ---
with st.expander("ðŸ“„ View Full Data"):
    st.dataframe(df.sort_values(by="Date", ascending=False), use_container_width=True)

# --- Download Option ---
st.download_button(
    "ðŸ“¥ Download CSV",
    df.to_csv(index=False).encode("utf-8"),
    file_name="my_expenses.csv",
    mime="text/csv"
)